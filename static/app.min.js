'use strict';

const randomCoords = (max_x, max_y) => ({
    x: (1 - Math.random()) * max_x,
    y: (1 - Math.random()) * max_y
});
const coordsMatch = (p1, p2) => p1.x === p2.x && p1.y === p2.y;

class BaseEntity {
    constructor(coords = { x: 0, y: 0 }) {
        this.coords = coords;
        this.value = '☠️';
        this.size = 3;
    }
    render(context) {
        context.font = `${this.size}em serif`;
        context.fillText(this.value, this.coords.x, this.coords.y);
    }
}

class BasePerson extends BaseEntity {
    constructor() {
        super(...arguments);
        this.size = 1;
        this.speed = 1;
        this.destination = this.coords;
        this.is_moving = false;
    }
    move(coords) {
        if (this.is_moving) {
            return;
        }
        this.is_moving = true;
        this.destination = coords;
    }
    tick() {
        if (coordsMatch(this.destination, this.coords)) {
            this.is_moving = false;
            return;
        }
        this.coords.x = this.destination.x > this.coords.x ? this.coords.x + this.speed : this.coords.x - this.speed;
        this.coords.y = this.destination.y > this.coords.y ? this.coords.y + this.speed : this.coords.y - this.speed;
    }
    render(ctx) {
        super.render(ctx);
        this.tick();
    }
}
class ManFarmer extends BasePerson {
    constructor() {
        super(...arguments);
        this.value = '👨‍🌾';
    }
}
const People = [ManFarmer];

class LibertyMonument extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🗽';
    }
}
class TokyoTower extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🗼';
    }
}
class Mosque extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🕌';
    }
}
class Church extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '⛪';
    }
}
class Kaaba extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🕋';
    }
}
class Moai extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🗿';
    }
}
class Mountain extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏔️';
    }
}
class Beach extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏖️';
    }
}
class Park extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏞️';
    }
}
class Stadium extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏟️';
    }
}
class ClassicalBuilding extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏛️';
    }
}
class Houses extends BaseEntity {
    constuctor() {
        super(...arguments);
        this.value = '🏘️';
    }
}
class School extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏫';
    }
}
class Factory extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏭';
    }
}
class Office extends BaseEntity {
    constructor() {
        super(...arguments);
        this.value = '🏤';
    }
}
const Places = [
    LibertyMonument, TokyoTower, Mosque,
    Church, Kaaba, Moai, Mountain,
    Beach, Park, Stadium, ClassicalBuilding,
    Houses, School, Factory, Office
];

class App {
    constructor(canvas) {
        this.canvas = canvas;
        this.placesCoords = [];
        this.movePeople = this.movePeople.bind(this);
        this.render = this.render.bind(this);
        canvas.height = canvas.clientHeight;
        canvas.width = canvas.clientWidth;
        const numberOfPlaces = Places.length;
        this.placesCoords = Array.from({ length: numberOfPlaces }).map(() => randomCoords(canvas.width, canvas.height));
        this.places = Places.map((C, i) => new C(this.placesCoords[i]));
        this.people = People.map((C, i) => new C(this.placesCoords[i]));
        requestAnimationFrame(this.render);
        this.movePeople();
    }
    getRandomPlaceCoords() {
        return this.placesCoords[Math.round(Math.random() * this.placesCoords.length)];
    }
    movePeople() {
        this.people.forEach((p) => { p.move(this.getRandomPlaceCoords()); });
        setTimeout(this.movePeople, (1 - Math.random()) * 2000);
    }
    render() {
        const ctx = this.canvas.getContext('2d');
        if (!ctx) {
            return;
        }
        ctx.globalCompositeOperation = 'destination-over';
        ctx.clearRect(0, 0, this.canvas.clientWidth, this.canvas.clientHeight);
        const render = (p) => { p.render(ctx); };
        this.places.forEach(render);
        this.people.forEach(render);
        requestAnimationFrame(this.render);
    }
}

window.onload = () => {
    const canvas = document.querySelector('#canvas');
    if (!canvas) {
        return;
    }
    new App(canvas);
};
