'use strict';

class BaseEntity {
    position = { x: 0, y: 0 };
    image = new Image();
    frameSize = { width: 128, height: 64 };
    frameCoords = { x: 0, y: 0 };
    loop = false;
    constructor(cfg) {
        this.position = cfg.position;
        this.image.src = cfg.imageSrc;
        this.loop = cfg.loop;
        this.tick = this.tick.bind(this);
        setInterval(this.tick, 200);
    }
    tick() {
        if (this.frameCoords.x + this.frameSize.width < this.image.width) {
            this.frameCoords.x += this.frameSize.width;
            return;
        }
        if (this.frameCoords.y + this.frameSize.height < this.image.height) {
            this.frameCoords.x = 0;
            this.frameCoords.y += this.frameSize.height;
            return;
        }
        if (this.loop) {
            this.frameCoords = { x: 0, y: 0 };
        }
    }
    render(context) {
        context.drawImage(this.image, this.frameCoords.x, this.frameCoords.y, this.frameSize.width, this.frameSize.height, this.position.x, this.position.y, this.frameSize.width, this.frameSize.height);
    }
}

class KnightAttacks extends BaseEntity {
    constructor(position) {
        super({
            position,
            imageSrc: '../assert/knight/Attacks.png',
            loop: false
        });
    }
}

class App {
    canvas;
    knight;
    constructor(canvas) {
        this.canvas = canvas;
        this.render = this.render.bind(this);
        canvas.height = canvas.clientHeight;
        canvas.width = canvas.clientWidth;
        this.knight = new KnightAttacks({ x: 0, y: 0 });
        // setTimeout(() => { this.knight = new KnightDeath({ x: 0, y: 0 }); }, 3000);
        requestAnimationFrame(this.render);
    }
    render() {
        const ctx = this.canvas.getContext('2d');
        if (!ctx) {
            return;
        }
        ctx.globalCompositeOperation = 'destination-over';
        ctx.clearRect(0, 0, this.canvas.clientWidth, this.canvas.clientHeight);
        this.knight.render(ctx);
        requestAnimationFrame(this.render);
    }
}

window.onload = () => {
    const canvas = document.querySelector('#canvas');
    if (!canvas) {
        return;
    }
    new App(canvas);
};
